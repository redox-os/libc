diff -rupN tcc/configure tcc-redox/configure
--- tcc/configure	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/configure	2016-07-27 20:01:32.315469568 -0700
@@ -46,7 +46,7 @@ tcc_elfinterp=""
 tcc_lddir=
 confvars=
 
-cpu=`uname -m`
+cpu="i686"
 
 # OS specific
 targetos=`uname -s`
@@ -57,6 +57,8 @@ case $targetos in
   *) ;;
 esac
 
+noldl="yes"
+
 # find source path
 # XXX: we assume an absolute path is given when launching configure, 
 # except in './configure' case.
@@ -399,7 +401,7 @@ print_mak() {
 echo "/* Automatically generated by configure - do not modify */" > $TMPH
 
 print_inc CONFIG_SYSROOT "$sysroot"
-print_inc CONFIG_TCCDIR "$tccdir"
+print_inc CONFIG_TCCDIR "/lib/tcc"
 print_mak CONFIG_TCC_SYSINCLUDEPATHS "$tcc_sysincludepaths"
 print_mak CONFIG_TCC_LIBPATHS "$tcc_libpaths"
 print_mak CONFIG_TCC_CRTPREFIX "$tcc_crtprefix"
diff -rupN tcc/lib/bcheck.c tcc-redox/lib/bcheck.c
--- tcc/lib/bcheck.c	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/lib/bcheck.c	2016-07-27 20:10:24.721796978 -0700
@@ -39,14 +39,14 @@
 #define CONFIG_TCC_MALLOC_HOOKS
 #define HAVE_MEMALIGN
 
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) \
-    || defined(__DragonFly__) || defined(__dietlibc__) \
-    || defined(__UCLIBC__) || defined(__OpenBSD__) \
-    || defined(_WIN32) || defined(TCC_UCLIBC)
+//#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) \
+//    || defined(__DragonFly__) || defined(__dietlibc__) \
+//    || defined(__UCLIBC__) || defined(__OpenBSD__) \
+//    || defined(_WIN32) || defined(TCC_UCLIBC)
 #warning Bound checking does not support malloc (etc.) in this environment.
 #undef CONFIG_TCC_MALLOC_HOOKS
 #undef HAVE_MEMALIGN
-#endif
+//#endif
 
 #define BOUND_T1_BITS 13
 #define BOUND_T2_BITS 11
diff -rupN tcc/libtcc.c tcc-redox/libtcc.c
--- tcc/libtcc.c	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/libtcc.c	2016-07-27 20:01:32.318802950 -0700
@@ -1041,13 +1041,6 @@ LIBTCCAPI void tcc_delete(TCCState *s1)
     for(i = 0; i < s1->nb_priv_sections; i++)
         free_section(s1->priv_sections[i]);
     dynarray_reset(&s1->priv_sections, &s1->nb_priv_sections);
-        
-    /* free any loaded DLLs */
-    for ( i = 0; i < s1->nb_loaded_dlls; i++) {
-        DLLReference *ref = s1->loaded_dlls[i];
-        if ( ref->handle )
-            dlclose(ref->handle);
-    }
     
     /* free loaded dlls array */
     dynarray_reset(&s1->loaded_dlls, &s1->nb_loaded_dlls);
@@ -1175,9 +1168,6 @@ ST_FUNC int tcc_add_file_internal(TCCSta
         if (ehdr.e_type == ET_DYN) {
             if (s1->output_type == TCC_OUTPUT_MEMORY) {
 #ifdef TCC_IS_NATIVE
-                void *h;
-                h = dlopen(filename, RTLD_GLOBAL | RTLD_LAZY);
-                if (h)
 #endif
                     ret = 0;
             } else {
@@ -1342,12 +1332,11 @@ LIBTCCAPI int tcc_set_output_type(TCCSta
     tcc_add_systemdir(s);
 # endif
 #else
-    /* add libc crt1/crti objects */
+    /* add libc crt0/crti objects */
     if ((output_type == TCC_OUTPUT_EXE || output_type == TCC_OUTPUT_DLL) &&
         !s->nostdlib) {
         if (output_type != TCC_OUTPUT_DLL)
-            tcc_add_crt(s, "crt1.o");
-        tcc_add_crt(s, "crti.o");
+            tcc_add_crt(s, "crt0.o");
     }
 #endif
     return 0;
diff -rupN tcc/tcc.c tcc-redox/tcc.c
--- tcc/tcc.c	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/tcc.c	2016-07-27 20:01:32.318802950 -0700
@@ -326,12 +326,8 @@ int main(int argc, char **argv)
             tcc_print_stats(s, getclock_us() - start_time);
 
         if (s->output_type == TCC_OUTPUT_MEMORY) {
-#ifdef TCC_IS_NATIVE
-            ret = tcc_run(s, argc - 1 - optind, argv + 1 + optind);
-#else
-            tcc_error_noabort("-run is not available in a cross compiler");
+            tcc_error_noabort("-run is not currently available on redox");
             ret = 1;
-#endif
         } else if (s->output_type == TCC_OUTPUT_PREPROCESS) {
              if (s->outfile)
                 fclose(s->ppfp);
diff -rupN tcc/tccelf.c tcc-redox/tccelf.c
--- tcc/tccelf.c	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/tccelf.c	2016-07-27 20:01:32.318802950 -0700
@@ -434,13 +434,6 @@ ST_FUNC void relocate_syms(TCCState *s1,
             name = strtab_section->data + sym->st_name;
             if (do_resolve) {
 #if defined TCC_IS_NATIVE && !defined _WIN32
-                void *addr;
-                name = symtab_section->link->data + sym->st_name;
-                addr = resolve_sym(s1, name);
-                if (addr) {
-                    sym->st_value = (addr_t)addr;
-                    goto found;
-                }
 #endif
             } else if (s1->dynsym) {
                 /* if dynamic symbol exist, then use it */
@@ -1366,9 +1359,6 @@ ST_FUNC void tcc_add_runtime(TCCState *s
 #elif !defined WITHOUT_LIBTCC
         tcc_add_support(s1, "libtcc1.a");
 #endif
-        /* add crt end if not memory output */
-        if (s1->output_type != TCC_OUTPUT_MEMORY)
-            tcc_add_crt(s1, "crtn.o");
     }
 }
 
@@ -2205,6 +2195,7 @@ static int elf_output_file(TCCState *s1,
     unlink(filename);
     fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, mode); 
     if (fd < 0) {
+	perror("Error");
         tcc_error_noabort("could not write '%s'", filename);
         goto fail;
     }
diff -rupN tcc/tcc.h tcc-redox/tcc.h
--- tcc/tcc.h	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/tcc.h	2016-07-27 20:01:32.318802950 -0700
@@ -43,10 +43,7 @@
 #ifndef _WIN32
 # include <unistd.h>
 # include <sys/time.h>
-# include <sys/ucontext.h>
-# include <sys/mman.h>
 # ifndef CONFIG_TCC_STATIC
-#  include <dlfcn.h>
 # endif
 #else
 # include <windows.h>
@@ -147,7 +144,6 @@
 #endif
 
 #if defined TCC_IS_NATIVE && !defined CONFIG_TCCBOOT
-# define CONFIG_TCC_BACKTRACE
 #endif
 
 /* ------------ path configuration ------------ */
diff -rupN tcc/tccrun.c tcc-redox/tccrun.c
--- tcc/tccrun.c	2013-02-15 06:24:00.000000000 -0800
+++ tcc-redox/tccrun.c	2016-07-27 20:01:32.318802950 -0700
@@ -21,6 +21,7 @@
 #include "tcc.h"
 
 /* only native compiler supports -run */
+#if 0
 #ifdef TCC_IS_NATIVE
 
 #ifdef CONFIG_TCC_BACKTRACE
@@ -729,4 +730,5 @@ ST_FUNC void *resolve_sym(TCCState *s1,
 
 #endif /* CONFIG_TCC_STATIC */
 #endif /* TCC_IS_NATIVE */
+#endif
 /* ------------------------------------------------------------- */
