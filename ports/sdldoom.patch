diff -rupN sdldoom/d_main.c sdldoom-redox/d_main.c
--- sdldoom/d_main.c	1999-12-20 21:16:15.000000000 -0800
+++ sdldoom-redox/d_main.c	2016-07-27 18:17:16.173846798 -0700
@@ -34,10 +34,7 @@ static const char rcsid[] = "$Id: d_main
 #include <stdio.h>
 #include <stdlib.h>
 
-extern int access(char *file, int mode);
-
 #define R_OK	4
-#if 0
 static int access(char *file, int mode)
 {
 	FILE *test_fp;
@@ -49,7 +46,6 @@ static int access(char *file, int mode)
 	}
 	return(-1);
 }
-#endif
 
 
 #include "doomdef.h"
diff -rupN sdldoom/i_net.c sdldoom-redox/i_net.c
--- sdldoom/i_net.c	1999-12-20 21:16:16.000000000 -0800
+++ sdldoom-redox/i_net.c	2016-07-27 18:17:16.177180151 -0700
@@ -51,7 +51,7 @@ rcsid[] = "$Id: m_bbox.c,v 1.1 1997/02/0
 #define Win32_Winsock
 #include <windows.h>
 #else
-#error You should hack this file for your BSD sockets layer
+//#error You should hack this file for your BSD sockets layer
 #endif
 #endif
 #endif
@@ -107,13 +107,9 @@ boolean NetListen (void);
 // NETWORKING
 //
 
-int	DOOMPORT =	(IPPORT_USERRESERVED +0x1d );
-
 int			sendsocket;
 int			insocket;
 
-struct	sockaddr_in	sendaddress[MAXNETNODES];
-
 void	(*netget) (void);
 void	(*netsend) (void);
 
@@ -123,14 +119,9 @@ void	(*netsend) (void);
 //
 int UDPsocket (void)
 {
-    int	s;
-	
-    // allocate a socket
-    s = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP);
-    if (s<0)
-	I_Error ("can't create socket: %s",strerror(errno));
-		
-    return s;
+	I_Error ("no sockets on redox");
+
+    return -1;
 }
 
 //
@@ -141,17 +132,7 @@ BindToLocalPort
 ( int	s,
   int	port )
 {
-    int			v;
-    struct sockaddr_in	address;
-	
-    memset (&address, 0, sizeof(address));
-    address.sin_family = AF_INET;
-    address.sin_addr.s_addr = INADDR_ANY;
-    address.sin_port = port;
-			
-    v = bind (s, (void *)&address, sizeof(address));
-    if (v == -1)
-	I_Error ("BindToPort: bind: %s", strerror(errno));
+	I_Error ("no bind on redox");
 }
 
 
@@ -160,32 +141,7 @@ BindToLocalPort
 //
 void PacketSend (void)
 {
-    int		c;
-    doomdata_t	sw;
-				
-    // byte swap
-    sw.checksum = htonl(netbuffer->checksum);
-    sw.player = netbuffer->player;
-    sw.retransmitfrom = netbuffer->retransmitfrom;
-    sw.starttic = netbuffer->starttic;
-    sw.numtics = netbuffer->numtics;
-    for (c=0 ; c< netbuffer->numtics ; c++)
-    {
-	sw.cmds[c].forwardmove = netbuffer->cmds[c].forwardmove;
-	sw.cmds[c].sidemove = netbuffer->cmds[c].sidemove;
-	sw.cmds[c].angleturn = htons(netbuffer->cmds[c].angleturn);
-	sw.cmds[c].consistancy = htons(netbuffer->cmds[c].consistancy);
-	sw.cmds[c].chatchar = netbuffer->cmds[c].chatchar;
-	sw.cmds[c].buttons = netbuffer->cmds[c].buttons;
-    }
-		
-    //printf ("sending %i\n",gametic);		
-    c = sendto (sendsocket , &sw, doomcom->datalength
-		,0,(void *)&sendaddress[doomcom->remotenode]
-		,sizeof(sendaddress[doomcom->remotenode]));
-	
-    //	if (c == -1)
-    //		I_Error ("SendPacket error: %s",strerror(errno));
+    I_Error("no send on redox");
 }
 
 
@@ -194,83 +150,15 @@ void PacketSend (void)
 //
 void PacketGet (void)
 {
-    int			i;
-    int			c;
-    struct sockaddr_in	fromaddress;
-    int			fromlen;
-    doomdata_t		sw;
-				
-    fromlen = sizeof(fromaddress);
-    c = recvfrom (insocket, &sw, sizeof(sw), 0
-		  , (struct sockaddr *)&fromaddress, &fromlen );
-    if (c == -1 )
-    {
-#ifdef EWOULDBLOCK
-	if (errno != EWOULDBLOCK)
-#endif
-	    I_Error ("GetPacket: %s",strerror(errno));
-	doomcom->remotenode = -1;		// no packet
-	return;
-    }
-
-    {
-	static int first=1;
-	if (first)
-	    printf("len=%d:p=[0x%x 0x%x] \n", c, *(int*)&sw, *((int*)&sw+1));
-	first = 0;
-    }
-
-    // find remote node number
-    for (i=0 ; i<doomcom->numnodes ; i++)
-	if ( fromaddress.sin_addr.s_addr == sendaddress[i].sin_addr.s_addr )
-	    break;
-
-    if (i == doomcom->numnodes)
-    {
-	// packet is not from one of the players (new game broadcast)
-	doomcom->remotenode = -1;		// no packet
-	return;
-    }
-	
-    doomcom->remotenode = i;			// good packet from a game player
-    doomcom->datalength = c;
-	
-    // byte swap
-    netbuffer->checksum = ntohl(sw.checksum);
-    netbuffer->player = sw.player;
-    netbuffer->retransmitfrom = sw.retransmitfrom;
-    netbuffer->starttic = sw.starttic;
-    netbuffer->numtics = sw.numtics;
-
-    for (c=0 ; c< netbuffer->numtics ; c++)
-    {
-	netbuffer->cmds[c].forwardmove = sw.cmds[c].forwardmove;
-	netbuffer->cmds[c].sidemove = sw.cmds[c].sidemove;
-	netbuffer->cmds[c].angleturn = ntohs(sw.cmds[c].angleturn);
-	netbuffer->cmds[c].consistancy = ntohs(sw.cmds[c].consistancy);
-	netbuffer->cmds[c].chatchar = sw.cmds[c].chatchar;
-	netbuffer->cmds[c].buttons = sw.cmds[c].buttons;
-    }
+    I_Error("no recv on redox");
 }
 
 
 
 int GetLocalAddress (void)
 {
-    char		hostname[1024];
-    struct hostent*	hostentry;	// host information entry
-    int			v;
-
-    // get local address
-    v = gethostname (hostname, sizeof(hostname));
-    if (v == -1)
-	I_Error ("GetLocalAddress : gethostname: errno %d",errno);
-	
-    hostentry = gethostbyname (hostname);
-    if (!hostentry)
-	I_Error ("GetLocalAddress : gethostbyname: couldn't get local host");
-		
-    return *(int *)hostentry->h_addr_list[0];
+	I_Error ("no gethostname on redox");
+    return -1;
 }
 
 
@@ -279,108 +167,11 @@ int GetLocalAddress (void)
 //
 void I_InitNetwork (void)
 {
-    boolean		trueval = true;
-    int			i;
-    int			p;
-    struct hostent*	hostentry;	// host information entry
-	
-    doomcom = malloc (sizeof (*doomcom) );
-    memset (doomcom, 0, sizeof(*doomcom) );
-    
-    // set up for network
-    i = M_CheckParm ("-dup");
-    if (i && i< myargc-1)
-    {
-	doomcom->ticdup = myargv[i+1][0]-'0';
-	if (doomcom->ticdup < 1)
-	    doomcom->ticdup = 1;
-	if (doomcom->ticdup > 9)
-	    doomcom->ticdup = 9;
-    }
-    else
-	doomcom-> ticdup = 1;
-	
-    if (M_CheckParm ("-extratic"))
-	doomcom-> extratics = 1;
-    else
-	doomcom-> extratics = 0;
-		
-    p = M_CheckParm ("-port");
-    if (p && p<myargc-1)
-    {
-	DOOMPORT = atoi (myargv[p+1]);
-	printf ("using alternate port %i\n",DOOMPORT);
-    }
-    
-    // parse network game options,
-    //  -net <consoleplayer> <host> <host> ...
-    i = M_CheckParm ("-net");
-    if (!i)
-    {
-	// single player game
-	netgame = false;
-	doomcom->id = DOOMCOM_ID;
-	doomcom->numplayers = doomcom->numnodes = 1;
-	doomcom->deathmatch = false;
-	doomcom->consoleplayer = 0;
-	return;
-    }
-
-    netsend = PacketSend;
-    netget = PacketGet;
-    netgame = true;
-
-    // parse player number and host list
-    doomcom->consoleplayer = myargv[i+1][0]-'1';
-
-    doomcom->numnodes = 1;	// this node for sure
-	
-    i++;
-    while (++i < myargc && myargv[i][0] != '-')
-    {
-	sendaddress[doomcom->numnodes].sin_family = AF_INET;
-	sendaddress[doomcom->numnodes].sin_port = htons(DOOMPORT);
-	if (myargv[i][0] == '.')
-	{
-	    sendaddress[doomcom->numnodes].sin_addr.s_addr 
-		= inet_addr (myargv[i]+1);
-	}
-	else
-	{
-	    hostentry = gethostbyname (myargv[i]);
-	    if (!hostentry)
-		I_Error ("gethostbyname: couldn't find %s", myargv[i]);
-	    sendaddress[doomcom->numnodes].sin_addr.s_addr 
-		= *(int *)hostentry->h_addr_list[0];
-	}
-	doomcom->numnodes++;
-    }
-	
-    doomcom->id = DOOMCOM_ID;
-    doomcom->numplayers = doomcom->numnodes;
-    
-    // build message to receive
-    insocket = UDPsocket ();
-    BindToLocalPort (insocket,htons(DOOMPORT));
-#ifdef linux
-    ioctl (insocket, FIONBIO, &trueval);
-#endif
-
-    sendsocket = UDPsocket ();
+    I_Error("cannot use networking on redox");
 }
 
 
 void I_NetCmd (void)
 {
-    if (doomcom->command == CMD_SEND)
-    {
-	netsend ();
-    }
-    else if (doomcom->command == CMD_GET)
-    {
-	netget ();
-    }
-    else
-	I_Error ("Bad net cmd: %i\n",doomcom->command);
+    I_Error("no netcmd on redox");
 }
-
