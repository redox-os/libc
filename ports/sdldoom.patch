diff -rupN sdldoom/d_main.c sdldoom-redox/d_main.c
--- sdldoom/d_main.c	1999-12-20 21:16:15.000000000 -0800
+++ sdldoom-redox/d_main.c	2016-07-27 18:17:16.173846798 -0700
@@ -1,4 +1,4 @@
-// Emacs style mode select   -*- C++ -*- 
+// Emacs style mode select   -*- C++ -*-
 //-----------------------------------------------------------------------------
 //
 // $Id:$
@@ -34,10 +34,7 @@ static const char rcsid[] = "$Id: d_main
 #include <stdio.h>
 #include <stdlib.h>
 
-extern int access(char *file, int mode);
-
 #define R_OK	4
-#if 0
 static int access(char *file, int mode)
 {
 	FILE *test_fp;
@@ -49,7 +46,6 @@ static int access(char *file, int mode)
 	}
 	return(-1);
 }
-#endif
 
 
 #include "doomdef.h"
@@ -172,12 +168,12 @@ void D_PostEvent (event_t* ev)
 void D_ProcessEvents (void)
 {
     event_t*	ev;
-	
+
     // IF STORE DEMO, DO NOT ACCEPT INPUT
     if ( ( gamemode == commercial )
 	 && (W_CheckNumForName("map01")<0) )
       return;
-	
+
     for ( ; eventtail != eventhead ; eventtail = (++eventtail)&(MAXEVENTS-1) )
     {
 	ev = &events[eventtail];
@@ -219,9 +215,9 @@ void D_Display (void)
 
     if (nodrawers)
 	return;                    // for comparative timing / profiling
-		
+
     redrawsbar = false;
-    
+
     // change the view size if needed
     if (setsizeneeded)
     {
@@ -241,7 +237,7 @@ void D_Display (void)
 
     if (gamestate == GS_LEVEL && gametic)
 	HU_Erase();
-    
+
     // do buffered drawing
     switch (gamestate)
     {
@@ -270,17 +266,17 @@ void D_Display (void)
 	D_PageDrawer ();
 	break;
     }
-    
+
     // draw buffered stuff to screen
     I_UpdateNoBlit ();
-    
+
     // draw the view directly
     if (gamestate == GS_LEVEL && !automapactive && gametic)
 	R_RenderPlayerView (&players[displayplayer]);
 
     if (gamestate == GS_LEVEL && gametic)
 	HU_Drawer ();
-    
+
     // clean up border stuff
     if (gamestate != oldgamestate && gamestate != GS_LEVEL)
 	I_SetPalette (W_CacheLumpName ("PLAYPAL",PU_CACHE));
@@ -309,7 +305,7 @@ void D_Display (void)
     viewactivestate = viewactive;
     inhelpscreensstate = inhelpscreens;
     oldgamestate = wipegamestate = gamestate;
-    
+
     // draw pause pic
     if (paused)
     {
@@ -333,7 +329,7 @@ void D_Display (void)
 	I_FinishUpdate ();              // page flip or blit buffer
 	return;
     }
-    
+
     // wipe update
     wipe_EndScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);
 
@@ -366,7 +362,7 @@ void D_DoomLoop (void)
 {
     if (demorecording)
 	G_BeginRecording ();
-		
+
     if (M_CheckParm ("-debugfile"))
     {
 	char    filename[20];
@@ -374,14 +370,14 @@ void D_DoomLoop (void)
 	printf ("debug output to: %s\n",filename);
 	debugfile = fopen (filename,"w");
     }
-	
+
     I_InitGraphics ();
 
     while (1)
     {
 	// frame syncronous IO operations
-	I_StartFrame ();                
-	
+	I_StartFrame ();
+
 	// process one or more tics
 	if (singletics)
 	{
@@ -464,7 +460,7 @@ void D_AdvanceDemo (void)
       demosequence = (demosequence+1)%7;
     else
       demosequence = (demosequence+1)%6;
-    
+
     switch (demosequence)
     {
       case 0:
@@ -545,13 +541,13 @@ void D_AddFile (char *file)
 {
     int     numwadfiles;
     char    *newfile;
-	
+
     for (numwadfiles = 0 ; wadfiles[numwadfiles] ; numwadfiles++)
 	;
 
     newfile = malloc (strlen(file)+1);
     strcpy (newfile, file);
-	
+
     wadfiles[numwadfiles] = newfile;
 }
 
@@ -586,11 +582,11 @@ void IdentifyVersion (void)
     // Retail.
     doomuwad = malloc(strlen(doomwaddir)+1+8+1);
     sprintf(doomuwad, "%s/doomu.wad", doomwaddir);
-    
+
     // Registered.
     doomwad = malloc(strlen(doomwaddir)+1+8+1);
     sprintf(doomwad, "%s/doom.wad", doomwaddir);
-    
+
     // Shareware.
     doom1wad = malloc(strlen(doomwaddir)+1+9+1);
     sprintf(doom1wad, "%s/doom1.wad", doomwaddir);
@@ -647,7 +643,7 @@ void IdentifyVersion (void)
 	    D_AddFile (DEVDATA"tnt.wad");
 	else*/
 	    D_AddFile (DEVDATA"doom2.wad");
-	    
+
 	D_AddFile (DEVMAPS"cdata/texture1.lmp");
 	D_AddFile (DEVMAPS"cdata/pnames.lmp");
 	strcpy (basedefault,DEVDATA"default.cfg");
@@ -722,7 +718,7 @@ void FindResponseFile (void)
 {
     int             i;
 #define MAXARGVS        100
-	
+
     for (i = 1;i < myargc;i++)
 	if (myargv[i][0] == '@')
 	{
@@ -735,7 +731,7 @@ void FindResponseFile (void)
 	    char    *file;
 	    char    *moreargs[20];
 	    char    *firstargv;
-			
+
 	    // READ THE RESPONSE FILE INTO MEMORY
 	    handle = fopen (&myargv[i][1],"rb");
 	    if (!handle)
@@ -750,16 +746,16 @@ void FindResponseFile (void)
 	    file = malloc (size);
 	    fread (file,size,1,handle);
 	    fclose (handle);
-			
+
 	    // KEEP ALL CMDLINE ARGS FOLLOWING @RESPONSEFILE ARG
 	    for (index = 0,k = i+1; k < myargc; k++)
 		moreargs[index++] = myargv[k];
-			
+
 	    firstargv = myargv[0];
 	    myargv = malloc(sizeof(char *)*MAXARGVS);
 	    memset(myargv,0,sizeof(char *)*MAXARGVS);
 	    myargv[0] = firstargv;
-			
+
 	    infile = file;
 	    indexinfile = k = 0;
 	    indexinfile++;  // SKIP PAST ARGV[0] (KEEP IT)
@@ -774,11 +770,11 @@ void FindResponseFile (void)
 		      ((*(infile+k)<= ' ') || (*(infile+k)>'z')))
 		    k++;
 	    } while(k < size);
-			
+
 	    for (k = 0;k < index;k++)
 		myargv[indexinfile++] = moreargs[k];
 	    myargc = indexinfile;
-	
+
 	    // DISPLAY ARGS
 	    printf("%d command-line args:\n",myargc);
 	    for (k=1;k<myargc;k++)
@@ -798,12 +794,12 @@ void D_DoomMain (void)
     char                    file[256];
 
     FindResponseFile ();
-	
+
     IdentifyVersion ();
-	
+
     setbuf (stdout, NULL);
     modifiedgame = false;
-	
+
     nomonsters = M_CheckParm ("-nomonsters");
     respawnparm = M_CheckParm ("-respawn");
     fastparm = M_CheckParm ("-fast");
@@ -867,19 +863,19 @@ void D_DoomMain (void)
 		 VERSION_NUM/100,VERSION_NUM%100);
 	break;
     }
-    
+
     printf ("%s\n",title);
 
     if (devparm)
 	printf(D_DEVSTR);
-    
+
     // turbo option
     if ( (p=M_CheckParm ("-turbo")) )
     {
 	int     scale = 200;
 	extern int forwardmove[2];
 	extern int sidemove[2];
-	
+
 	if (p<myargc-1)
 	    scale = atoi (myargv[p+1]);
 	if (scale < 10)
@@ -892,7 +888,7 @@ void D_DoomMain (void)
 	sidemove[0] = sidemove[0]*scale/100;
 	sidemove[1] = sidemove[1]*scale/100;
     }
-    
+
     // add any files specified on the command line with -file wadfile
     // to the wad list
     //
@@ -914,7 +910,7 @@ void D_DoomMain (void)
 	    printf("Warping to Episode %s, Map %s.\n",
 		   myargv[p+1],myargv[p+2]);
 	    break;
-	    
+
 	  case commercial:
 	  default:
 	    p = atoi (myargv[p+1]);
@@ -926,7 +922,7 @@ void D_DoomMain (void)
 	}
 	D_AddFile (file);
     }
-	
+
     p = M_CheckParm ("-file");
     if (p)
     {
@@ -948,14 +944,14 @@ void D_DoomMain (void)
 	D_AddFile (file);
 	printf("Playing demo %s.lmp.\n",myargv[p+1]);
     }
-    
+
     // get skill / episode / map from parms
     startskill = sk_medium;
     startepisode = 1;
     startmap = 1;
     autostart = false;
 
-		
+
     p = M_CheckParm ("-skill");
     if (p && p < myargc-1)
     {
@@ -970,7 +966,7 @@ void D_DoomMain (void)
 	startmap = 1;
 	autostart = true;
     }
-	
+
     p = M_CheckParm ("-timer");
     if (p && p < myargc-1 && deathmatch)
     {
@@ -998,7 +994,7 @@ void D_DoomMain (void)
 	}
 	autostart = true;
     }
-    
+
     // init subsystems
     printf ("V_Init: allocate screens.\n");
     V_Init ();
@@ -1012,7 +1008,7 @@ void D_DoomMain (void)
     printf ("W_Init: Init WADfiles.\n");
     W_InitMultipleFiles (wadfiles);
 printf("added\n");
-    
+
 
     // Check for -file in shareware
     if (modifiedgame)
@@ -1026,19 +1022,19 @@ printf("added\n");
 	    "dphoof","bfgga0","heada1","cybra1","spida1d1"
 	};
 	int i;
-	
+
 	if ( gamemode == shareware)
 	    I_Error("\nYou cannot -file with the shareware "
 		    "version. Register!");
 
 	// Check for fake IWAD with right name,
-	// but w/o all the lumps of the registered version. 
+	// but w/o all the lumps of the registered version.
 	if (gamemode == registered)
 	    for (i = 0;i < 23; i++)
 		if (W_CheckNumForName(name[i])<0)
 		    I_Error("\nThis is not the registered version.");
     }
-    
+
     // Iff additonal PWAD files are used, print modified banner
     if (modifiedgame)
     {
@@ -1052,7 +1048,7 @@ printf("added\n");
 	    );
 	getchar ();
     }
-	
+
 
     // Check and print which version is executed.
     switch ( gamemode )
@@ -1075,7 +1071,7 @@ printf("added\n");
 	    "===========================================================================\n"
 	);
 	break;
-	
+
       default:
 	// Ouch.
 	break;
@@ -1110,12 +1106,12 @@ printf("added\n");
     if (p && p<myargc-1)
     {
 	// for statistics driver
-	extern  void*	statcopy;                            
+	extern  void*	statcopy;
 
 	statcopy = (void*)atoi(myargv[p+1]);
 	printf ("External statistics registered.\n");
     }
-    
+
     // start the apropriate game based on parms
     p = M_CheckParm ("-record");
 
@@ -1124,7 +1120,7 @@ printf("added\n");
 	G_RecordDemo (myargv[p+1]);
 	autostart = true;
     }
-	
+
     p = M_CheckParm ("-playdemo");
     if (p && p < myargc-1)
     {
@@ -1132,14 +1128,14 @@ printf("added\n");
 	G_DeferedPlayDemo (myargv[p+1]);
 	D_DoomLoop ();  // never returns
     }
-	
+
     p = M_CheckParm ("-timedemo");
     if (p && p < myargc-1)
     {
 	G_TimeDemo (myargv[p+1]);
 	D_DoomLoop ();  // never returns
     }
-	
+
     p = M_CheckParm ("-loadgame");
     if (p && p < myargc-1)
     {
@@ -1149,7 +1145,7 @@ printf("added\n");
 	    sprintf(file, SAVEGAMENAME"%c.dsg",myargv[p+1][0]);
 	G_LoadGame (file);
     }
-	
+
 
     if ( gameaction != ga_loadgame )
     {
diff -rupN sdldoom/i_net.c sdldoom-redox/i_net.c
--- sdldoom/i_net.c	1999-12-20 21:16:16.000000000 -0800
+++ sdldoom-redox/i_net.c	2016-07-27 18:17:16.177180151 -0700
@@ -1,4 +1,4 @@
-// Emacs style mode select   -*- C++ -*- 
+// Emacs style mode select   -*- C++ -*-
 //-----------------------------------------------------------------------------
 //
 // $Id:$
@@ -51,7 +51,7 @@ rcsid[] = "$Id: m_bbox.c,v 1.1 1997/02/0
 #define Win32_Winsock
 #include <windows.h>
 #else
-#error You should hack this file for your BSD sockets layer
+//#error You should hack this file for your BSD sockets layer
 #endif
 #endif
 #endif
@@ -90,7 +90,7 @@ rcsid[] = "$Id: m_bbox.c,v 1.1 1997/02/0
         ((unsigned short int)((((unsigned short int)(x) & 0x00ff) << 8) | \
                               (((unsigned short int)(x) & 0xff00) >> 8)))
 #endif
-	  
+
 #ifndef htonl
 #define htonl(x) ntohl(x)
 #endif
@@ -107,13 +107,9 @@ boolean NetListen (void);
 // NETWORKING
 //
 
-int	DOOMPORT =	(IPPORT_USERRESERVED +0x1d );
-
 int			sendsocket;
 int			insocket;
 
-struct	sockaddr_in	sendaddress[MAXNETNODES];
-
 void	(*netget) (void);
 void	(*netsend) (void);
 
@@ -123,14 +119,9 @@ void	(*netsend) (void);
 //
 int UDPsocket (void)
 {
-    int	s;
-	
-    // allocate a socket
-    s = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP);
-    if (s<0)
-	I_Error ("can't create socket: %s",strerror(errno));
-		
-    return s;
+	I_Error ("no sockets on redox");
+
+    return -1;
 }
 
 //
@@ -141,17 +132,7 @@ BindToLocalPort
 ( int	s,
   int	port )
 {
-    int			v;
-    struct sockaddr_in	address;
-	
-    memset (&address, 0, sizeof(address));
-    address.sin_family = AF_INET;
-    address.sin_addr.s_addr = INADDR_ANY;
-    address.sin_port = port;
-			
-    v = bind (s, (void *)&address, sizeof(address));
-    if (v == -1)
-	I_Error ("BindToPort: bind: %s", strerror(errno));
+	I_Error ("no bind on redox");
 }
 
 
@@ -160,32 +141,7 @@ BindToLocalPort
 //
 void PacketSend (void)
 {
-    int		c;
-    doomdata_t	sw;
-				
-    // byte swap
-    sw.checksum = htonl(netbuffer->checksum);
-    sw.player = netbuffer->player;
-    sw.retransmitfrom = netbuffer->retransmitfrom;
-    sw.starttic = netbuffer->starttic;
-    sw.numtics = netbuffer->numtics;
-    for (c=0 ; c< netbuffer->numtics ; c++)
-    {
-	sw.cmds[c].forwardmove = netbuffer->cmds[c].forwardmove;
-	sw.cmds[c].sidemove = netbuffer->cmds[c].sidemove;
-	sw.cmds[c].angleturn = htons(netbuffer->cmds[c].angleturn);
-	sw.cmds[c].consistancy = htons(netbuffer->cmds[c].consistancy);
-	sw.cmds[c].chatchar = netbuffer->cmds[c].chatchar;
-	sw.cmds[c].buttons = netbuffer->cmds[c].buttons;
-    }
-		
-    //printf ("sending %i\n",gametic);		
-    c = sendto (sendsocket , &sw, doomcom->datalength
-		,0,(void *)&sendaddress[doomcom->remotenode]
-		,sizeof(sendaddress[doomcom->remotenode]));
-	
-    //	if (c == -1)
-    //		I_Error ("SendPacket error: %s",strerror(errno));
+    I_Error("no send on redox");
 }
 
 
@@ -194,83 +150,15 @@ void PacketSend (void)
 //
 void PacketGet (void)
 {
-    int			i;
-    int			c;
-    struct sockaddr_in	fromaddress;
-    int			fromlen;
-    doomdata_t		sw;
-				
-    fromlen = sizeof(fromaddress);
-    c = recvfrom (insocket, &sw, sizeof(sw), 0
-		  , (struct sockaddr *)&fromaddress, &fromlen );
-    if (c == -1 )
-    {
-#ifdef EWOULDBLOCK
-	if (errno != EWOULDBLOCK)
-#endif
-	    I_Error ("GetPacket: %s",strerror(errno));
-	doomcom->remotenode = -1;		// no packet
-	return;
-    }
-
-    {
-	static int first=1;
-	if (first)
-	    printf("len=%d:p=[0x%x 0x%x] \n", c, *(int*)&sw, *((int*)&sw+1));
-	first = 0;
-    }
-
-    // find remote node number
-    for (i=0 ; i<doomcom->numnodes ; i++)
-	if ( fromaddress.sin_addr.s_addr == sendaddress[i].sin_addr.s_addr )
-	    break;
-
-    if (i == doomcom->numnodes)
-    {
-	// packet is not from one of the players (new game broadcast)
-	doomcom->remotenode = -1;		// no packet
-	return;
-    }
-	
-    doomcom->remotenode = i;			// good packet from a game player
-    doomcom->datalength = c;
-	
-    // byte swap
-    netbuffer->checksum = ntohl(sw.checksum);
-    netbuffer->player = sw.player;
-    netbuffer->retransmitfrom = sw.retransmitfrom;
-    netbuffer->starttic = sw.starttic;
-    netbuffer->numtics = sw.numtics;
-
-    for (c=0 ; c< netbuffer->numtics ; c++)
-    {
-	netbuffer->cmds[c].forwardmove = sw.cmds[c].forwardmove;
-	netbuffer->cmds[c].sidemove = sw.cmds[c].sidemove;
-	netbuffer->cmds[c].angleturn = ntohs(sw.cmds[c].angleturn);
-	netbuffer->cmds[c].consistancy = ntohs(sw.cmds[c].consistancy);
-	netbuffer->cmds[c].chatchar = sw.cmds[c].chatchar;
-	netbuffer->cmds[c].buttons = sw.cmds[c].buttons;
-    }
+    I_Error("no recv on redox");
 }
 
 
 
 int GetLocalAddress (void)
 {
-    char		hostname[1024];
-    struct hostent*	hostentry;	// host information entry
-    int			v;
-
-    // get local address
-    v = gethostname (hostname, sizeof(hostname));
-    if (v == -1)
-	I_Error ("GetLocalAddress : gethostname: errno %d",errno);
-	
-    hostentry = gethostbyname (hostname);
-    if (!hostentry)
-	I_Error ("GetLocalAddress : gethostbyname: couldn't get local host");
-		
-    return *(int *)hostentry->h_addr_list[0];
+	I_Error ("no gethostname on redox");
+    return -1;
 }
 
 
@@ -279,108 +167,11 @@ int GetLocalAddress (void)
 //
 void I_InitNetwork (void)
 {
-    boolean		trueval = true;
-    int			i;
-    int			p;
-    struct hostent*	hostentry;	// host information entry
-	
-    doomcom = malloc (sizeof (*doomcom) );
-    memset (doomcom, 0, sizeof(*doomcom) );
-    
-    // set up for network
-    i = M_CheckParm ("-dup");
-    if (i && i< myargc-1)
-    {
-	doomcom->ticdup = myargv[i+1][0]-'0';
-	if (doomcom->ticdup < 1)
-	    doomcom->ticdup = 1;
-	if (doomcom->ticdup > 9)
-	    doomcom->ticdup = 9;
-    }
-    else
-	doomcom-> ticdup = 1;
-	
-    if (M_CheckParm ("-extratic"))
-	doomcom-> extratics = 1;
-    else
-	doomcom-> extratics = 0;
-		
-    p = M_CheckParm ("-port");
-    if (p && p<myargc-1)
-    {
-	DOOMPORT = atoi (myargv[p+1]);
-	printf ("using alternate port %i\n",DOOMPORT);
-    }
-    
-    // parse network game options,
-    //  -net <consoleplayer> <host> <host> ...
-    i = M_CheckParm ("-net");
-    if (!i)
-    {
-	// single player game
-	netgame = false;
-	doomcom->id = DOOMCOM_ID;
-	doomcom->numplayers = doomcom->numnodes = 1;
-	doomcom->deathmatch = false;
-	doomcom->consoleplayer = 0;
-	return;
-    }
-
-    netsend = PacketSend;
-    netget = PacketGet;
-    netgame = true;
-
-    // parse player number and host list
-    doomcom->consoleplayer = myargv[i+1][0]-'1';
-
-    doomcom->numnodes = 1;	// this node for sure
-	
-    i++;
-    while (++i < myargc && myargv[i][0] != '-')
-    {
-	sendaddress[doomcom->numnodes].sin_family = AF_INET;
-	sendaddress[doomcom->numnodes].sin_port = htons(DOOMPORT);
-	if (myargv[i][0] == '.')
-	{
-	    sendaddress[doomcom->numnodes].sin_addr.s_addr 
-		= inet_addr (myargv[i]+1);
-	}
-	else
-	{
-	    hostentry = gethostbyname (myargv[i]);
-	    if (!hostentry)
-		I_Error ("gethostbyname: couldn't find %s", myargv[i]);
-	    sendaddress[doomcom->numnodes].sin_addr.s_addr 
-		= *(int *)hostentry->h_addr_list[0];
-	}
-	doomcom->numnodes++;
-    }
-	
-    doomcom->id = DOOMCOM_ID;
-    doomcom->numplayers = doomcom->numnodes;
-    
-    // build message to receive
-    insocket = UDPsocket ();
-    BindToLocalPort (insocket,htons(DOOMPORT));
-#ifdef linux
-    ioctl (insocket, FIONBIO, &trueval);
-#endif
-
-    sendsocket = UDPsocket ();
+    I_Error("cannot use networking on redox");
 }
 
 
 void I_NetCmd (void)
 {
-    if (doomcom->command == CMD_SEND)
-    {
-	netsend ();
-    }
-    else if (doomcom->command == CMD_GET)
-    {
-	netget ();
-    }
-    else
-	I_Error ("Bad net cmd: %i\n",doomcom->command);
+    I_Error("no netcmd on redox");
 }
-
